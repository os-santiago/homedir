---
name: Build Native

on:
  workflow_call:

jobs:
  build-native:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ vars.REGISTRY }}
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      LOGGED_IN: 0
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Derive version
        run: |
          cd quarkus-app
          VERSION="$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          cd -
          echo "## Version derivada: $VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build native binary
        working-directory: quarkus-app
        run: ./mvnw clean package -Pnative -Dquarkus.native.container-build=true

      - name: Verify native binary exists
        run: ls quarkus-app/target/*-runner

      - name: Build Docker image
        working-directory: quarkus-app
        run: |
          set -euo pipefail

          DEFAULT_IMAGE_NAME="${GITHUB_REPOSITORY#*/}"
          IMAGE_NAME_VALUE="${IMAGE_NAME:-$DEFAULT_IMAGE_NAME}"

          IMAGE_REPOSITORY="$IMAGE_NAME_VALUE"
          if [ -n "${REGISTRY:-}" ]; then
            IMAGE_REPOSITORY="${REGISTRY}/${IMAGE_NAME_VALUE}"
          fi

          IMAGE="${IMAGE_REPOSITORY}:${GITHUB_SHA}"

          if [ -n "${PR_NUMBER:-}" ]; then
            PRTAG="${IMAGE_REPOSITORY}:pr-${PR_NUMBER}-${GITHUB_SHA}"
            docker build \
              -f src/main/docker/Dockerfile.native \
              -t "$IMAGE" -t "$PRTAG" \
              .
            echo "PRTAG=$PRTAG" >> "$GITHUB_ENV"
          else
            docker build \
              -f src/main/docker/Dockerfile.native \
              -t "$IMAGE" \
              .
          fi

          {
            echo "IMAGE=$IMAGE"
            echo "IMAGE_REPOSITORY=$IMAGE_REPOSITORY"
          } >> "$GITHUB_ENV"

      - name: Push Docker image
        env:
          IMAGE: ${{ env.IMAGE }}
          PRTAG: ${{ env.PRTAG }}
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        run: |
          if [ -z "${REGISTRY:-}" ]; then
            echo "Registry not configured; skipping image push."
            exit 0
          fi

          echo "$QUAY_PASSWORD" | docker login "$REGISTRY" -u "$QUAY_USERNAME" --password-stdin
          docker push "$IMAGE"
          if [ -n "$PRTAG" ]; then
            docker push "$PRTAG"
          fi
          echo "LOGGED_IN=1" >> $GITHUB_ENV

      - name: Resolve digest & persist ref (diagnÃ³stico)
        env:
          IMAGE: ${{ env.IMAGE }}
          PRTAG: ${{ env.PRTAG }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y skopeo jq
          if [ "$LOGGED_IN" = "1" ] && [ -n "$PRTAG" ]; then
            DIGEST="$(skopeo inspect --format '{{.Digest}}' docker://$PRTAG)"
            echo "REF=${IMAGE_REPOSITORY}@${DIGEST}" | tee image-ref.txt
            echo "REF=${IMAGE_REPOSITORY}@${DIGEST}" >> $GITHUB_ENV
          else
            echo "REF=docker:${IMAGE}" | tee image-ref.txt
            echo "REF=docker:${IMAGE}" >> $GITHUB_ENV
          fi

      - name: Upload image ref (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: pr-image-ref
          path: image-ref.txt

      - name: Tag & push version alias
        run: |
          if [ -z "${REGISTRY:-}" ]; then
            echo "Registry not configured; skipping remote tagging."
            exit 0
          fi

          docker tag "$IMAGE" "${IMAGE_REPOSITORY}:${VERSION}"
          if [ "$LOGGED_IN" = "1" ]; then
            docker push "${IMAGE_REPOSITORY}:${VERSION}"
          fi

      - name: Sign images
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          printf "%s" "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign --key cosign.key --yes "$REF" || true
          if [ -n "${REGISTRY:-}" ]; then
            cosign sign --key cosign.key --yes "${IMAGE_REPOSITORY}:${VERSION}" || true
          fi
          rm -f cosign.key

      - name: Install Syft
        run: |
          for i in 1 2 3; do
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin && break
            sleep 10
          done
          syft version

      - name: Attach SBOM
        run: |
          if [ ! -f sbom-image.cdx.json ]; then
            syft packages "$REF" -o cyclonedx-json > sbom-image.cdx.json
          fi
          cosign attach sbom --sbom sbom-image.cdx.json --type cyclonedx "$REF" || true
          if [ -n "${REGISTRY:-}" ]; then
            cosign attach sbom --sbom sbom-image.cdx.json --type cyclonedx "${IMAGE_REPOSITORY}:${VERSION}" || true
          fi


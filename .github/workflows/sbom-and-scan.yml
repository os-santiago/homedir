name: sbom-and-scan

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 6 * * 1"  # lunes 06:00 UTC

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.REGISTRY || 'ghcr.io' }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME || github.repository }}
  SECURITY_GATING: ${{ vars.SECURITY_GATING || 'permissive' }}
  COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
  COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

jobs:
  build-sbom-and-scan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/dependency-review-action@v4

      - name: Login to Quay
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        if: ${{ env.QUAY_USERNAME != '' && env.QUAY_PASSWORD != '' }}
        run: echo "$QUAY_PASSWORD" | docker login "$REGISTRY" -u "$QUAY_USERNAME" --password-stdin

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build native runner
        working-directory: quarkus-app
        run: ./mvnw -B -Pnative -Dquarkus.native.container-build=true -DskipTests verify

      - name: Build native image
        run: |
          docker build -f quarkus-app/src/main/docker/Dockerfile.native \
            -t ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA} \
            -t ${REGISTRY}/${IMAGE_NAME}:pr-${{ github.event.number }}-${GITHUB_SHA} \
            quarkus-app

      - name: Push image
        run: |
          docker push ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA}
          docker push ${REGISTRY}/${IMAGE_NAME}:pr-${{ github.event.number }}-${GITHUB_SHA}

      - name: Compute digest (stable)
        run: |
          sudo apt-get update -y && sudo apt-get install -y skopeo
          DIGEST="$(skopeo inspect --format '{{.Digest}}' docker://${REGISTRY}/${IMAGE_NAME}:pr-${{ github.event.number }}-${GITHUB_SHA})"
          echo "IMAGE_DIGEST=$DIGEST" >> "$GITHUB_ENV"
          echo "REF=${REGISTRY}/${IMAGE_NAME}@${DIGEST}" >> "$GITHUB_ENV"
          echo "$REF" > image-ref.txt

      - name: Install Syft and Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: SBOM (Syft) / Reports (Grype)
        run: |
          syft packages "$REF" -o cyclonedx-json > sbom-image.cdx.json || true
          grype "$REF" -o table > grype-report.txt || true
          grype "$REF" -o json  > grype-report.json || true
          grype "$REF" -o sarif > grype-report.sarif || true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            image-ref.txt
            sbom-image.cdx.json
            grype-report.txt
            grype-report.json
            grype-report.sarif
          if-no-files-found: warn

      - name: Upload SARIF to Code Scanning
        if: ${{ always() && hashFiles('grype-report.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype-report.sarif
          category: grype

      - name: Severity threshold (warn-only)
        env:
          FAIL_ON: ${{ github.event_name == 'pull_request' && 'high' || 'critical' }}
        continue-on-error: ${{ env.SECURITY_GATING == 'permissive' }}
        run: grype "$REF" --fail-on ${FAIL_ON} -o table

      - name: Add digest to job summary
        run: |
          echo "### Image REF" >> $GITHUB_STEP_SUMMARY
          echo "\`$REF\`" >> $GITHUB_STEP_SUMMARY

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (key-pair)
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_PASSWORD: ${{ env.COSIGN_PASSWORD }}
        run: |
          printf "%s" "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign --key cosign.key --yes "$REF"
          rm -f cosign.key

  sbomExpected:
    name: sbomExpected
    needs: build-sbom-and-scan
    if: ${{ always() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check build result
        run: |
          if [ "${{ needs.build-sbom-and-scan.result }}" != "success" ]; then
            echo "build-sbom-and-scan job failed" >&2
            exit 1
          fi
          echo "build-sbom-and-scan job succeeded"

  promote:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: google/cloud-sdk:latest
    env:
      PROJECT_ID: scanales-191111
      SERVICE_ACCOUNT_NAME: github-actions-deployer
      GKE_CLUSTER_NAME: eventflow-cluster
      GKE_ZONE: us-central1
      GKE_NAMESPACE: eventflow
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Quay
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        if: ${{ env.QUAY_USERNAME != '' && env.QUAY_PASSWORD != '' }}
        run: echo "$QUAY_PASSWORD" | docker login "$REGISTRY" -u "$QUAY_USERNAME" --password-stdin

      - name: Resolve REF from PR tag
        run: |
          apt-get update -y && apt-get install -y jq skopeo gh
          prs=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/pulls -H "Accept: application/vnd.github+json")
          pr_number=$(echo "$prs" | jq -r '.[0].number')
          head_sha=$(echo "$prs" | jq -r '.[0].head.sha')
          DIGEST="$(skopeo inspect --format '{{.Digest}}' docker://${REGISTRY}/${IMAGE_NAME}:pr-${pr_number}-${head_sha})"
          echo "IMAGE_DIGEST=$DIGEST" >> "$GITHUB_ENV"
          echo "REF=${REGISTRY}/${IMAGE_NAME}@${DIGEST}" >> "$GITHUB_ENV"

      - name: Promote digest to main tags
        run: |
          SHORT=$(echo "${GITHUB_SHA}" | cut -c1-12)
          skopeo copy docker://$REF docker://${REGISTRY}/${IMAGE_NAME}:main-${SHORT}
          # skopeo copy docker://$REF docker://${REGISTRY}/${IMAGE_NAME}:latest

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (key-pair)
        if: ${{ env.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_PASSWORD: ${{ env.COSIGN_PASSWORD }}
        run: |
          printf "%s" "$COSIGN_PRIVATE_KEY" > cosign.key
          cosign sign --key cosign.key --yes "$REF"
          rm -f cosign.key

      - name: Write GCP credentials
        env:
          GCP_SERVICE_ACCOUNT_KEY_JSON: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}
        run: echo "$GCP_SERVICE_ACCOUNT_KEY_JSON" | base64 -d > "$HOME/key.json"

      - name: Authenticate to Google Cloud
        run: |
          gcloud auth activate-service-account --key-file="$HOME/key.json"
          gcloud config set project "$PROJECT_ID"
          gcloud config set compute/zone "$GKE_ZONE"

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER_NAME" --zone "$GKE_ZONE" --project "$PROJECT_ID"

      - name: Update OAuth secret
        env:
          OIDC_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          OIDC_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          OIDC_AUTH_SERVER_URL: ${{ secrets.OIDC_AUTH_SERVER_URL }}
          OIDC_AUTH_URI: ${{ secrets.OIDC_AUTH_URI }}
          OIDC_TOKEN_URI: ${{ secrets.OIDC_TOKEN_URI }}
          OIDC_JWKS_URI: ${{ secrets.OIDC_JWKS_URI }}
          OIDC_REDIRECT_URI: ${{ secrets.OIDC_REDIRECT_URI }}
        run: |
          kubectl -n "$GKE_NAMESPACE" create secret generic google-oauth \
            --from-literal=client-id="$OIDC_CLIENT_ID" \
            --from-literal=client-secret="$OIDC_CLIENT_SECRET" \
            --from-literal=auth-server-url="$OIDC_AUTH_SERVER_URL" \
            --from-literal=auth-uri="$OIDC_AUTH_URI" \
            --from-literal=token-uri="$OIDC_TOKEN_URI" \
            --from-literal=jwks-uri="$OIDC_JWKS_URI" \
            --from-literal=redirect-uri="$OIDC_REDIRECT_URI" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/namespace.yaml
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/managed-cert.yaml
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/service.yaml
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/deployment.yaml
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/ingress.yaml
          kubectl apply -n "$GKE_NAMESPACE" -f deployment/pvc.yaml

      - name: Set image by digest and rollout
        run: |
          kubectl set image deployment/eventflow eventflow=$REF -n "$GKE_NAMESPACE"
          kubectl rollout status deployment/eventflow -n "$GKE_NAMESPACE"
